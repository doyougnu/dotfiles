(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "â†‘"
            :value {EWW_NET.up}
            :onchange "")
    (metric :label "â†“"
            :value {EWW_NET.down}
            :onchange "")
    (metric :label "ðŸ”ˆ"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "âŠŒ"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "/"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (metric :label "/store"
            :value {round((1 - (EWW_DISK["/store"].free / EWW_DISK["/store"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :onclick "wmctrl -s 0" "Î»")
    (button :onclick "wmctrl -s 1" "Ï•")
    (button :onclick "wmctrl -s 2" "ðŸŽµ")
    (button :onclick "wmctrl -s 3" "Ï‘")))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))


(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "1s"
  "date '+|  %b %d, %Y  %H:%M:%S'")

(defwindow bar
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "1px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "36px")
  (bar))
